# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import jsonservice_pb2 as jsonservice__pb2


class JSONSERVICEStub(object):
    """The json service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get_json = channel.unary_unary(
                '/jsonservice.JSONSERVICE/get_json',            #get_json方法对应的地址
                request_serializer=jsonservice__pb2.JSONREQUEST.SerializeToString,#将消息对象序列化为字节
                response_deserializer=jsonservice__pb2.JSONRESPONSE.FromString,#将字节反序列化为消息对象
                )
        self.get_json_stream = channel.stream_stream(
                '/jsonservice.JSONSERVICE/get_json_stream',
                request_serializer=jsonservice__pb2.JSONREQUEST.SerializeToString,
                response_deserializer=jsonservice__pb2.JSONRESPONSE.FromString,
                )


class JSONSERVICEServicer(object):
    """The json service definition.
    """

    def get_json(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_json_stream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_JSONSERVICEServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get_json': grpc.unary_unary_rpc_method_handler(
                    servicer.get_json,
                    request_deserializer=jsonservice__pb2.JSONREQUEST.FromString,
                    response_serializer=jsonservice__pb2.JSONRESPONSE.SerializeToString,
            ),
            'get_json_stream': grpc.stream_stream_rpc_method_handler(
                    servicer.get_json_stream,
                    request_deserializer=jsonservice__pb2.JSONREQUEST.FromString,
                    response_serializer=jsonservice__pb2.JSONRESPONSE.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'jsonservice.JSONSERVICE', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class JSONSERVICE(object):
    """The json service definition.
    """

    @staticmethod
    def get_json(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/jsonservice.JSONSERVICE/get_json',
            jsonservice__pb2.JSONREQUEST.SerializeToString,
            jsonservice__pb2.JSONRESPONSE.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_json_stream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/jsonservice.JSONSERVICE/get_json_stream',
            jsonservice__pb2.JSONREQUEST.SerializeToString,
            jsonservice__pb2.JSONRESPONSE.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
